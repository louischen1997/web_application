AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  Subnet1Cidr:
    Description: "subnet1 cidr"
    Type: String
    Default: "10.0.32.0/20"
  Subnet1ZN:
    Description: "subnet1 zone"
    Type: String
    Default: "us-west-2a"  
  Subnet2Cidr:
    Description: "subnet2 cidr"
    Type: String
    Default: "10.0.0.0/20"
  Subnet2ZN:
    Description: "subnet2 zone"
    Type: String
    Default: "us-west-2b"   
  Subnet3Cidr:
    Description: "subnet3 cidr"
    Type: String
    Default: "10.0.16.0/20"
  Subnet3ZN:
    Description: "subnet3 zone"
    Type: String
    Default: "us-west-2c"

  Subnet4Cidr:
    Description: "subnet4 cidr"
    Type: String
    Default: "10.0.160.0/20"
  Subnet5Cidr:
    Description: "subnet5 cidr"
    Type: String
    Default: "10.0.128.0/20"
  Subnet6Cidr:
    Description: "subnet6 cidr"
    Type: String
    Default: "10.0.144.0/20"        
  ImageIdd:
    Description: "img id"
    Type: String 
    Default: "ami-0f425899fb7879df0"  
  Keynamestr:
    Description: "using key"      
    Type: String
    Default: "aws-us-west-2"
  Username:
    Description: username
    Type: String
    Default: csye6225
  Userpass:
    Description: userpass
    Type: String
    Default: chenYTCfor6225
  DBRegion:
    Description: DBRegion
    Type: String
    Default: us-west-2
  awsCloudWatchServerAgent:
    Type: String
    Default: arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  dynamodbpolicy:
    Type: String
    Default: arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess  
  setrecordDomainID:
    Type: String
    Default: Z007227514AEIDXKO3F49
  setrecordDomainName:
    Type: String
    Default: prod.louisdomain6225.me.
  setDomainName:
    Type: String
    Default: prod.louisdomain6225.me  
  sendgridkey:
    Type: String
    Default: sendgrid_api_key 
  dynamodbtable:
    Type: String
    Default: dynamodbtable    
  lambdaPolicycloudwatch:
    Type: String
    Default: arn:aws:iam::aws:policy/CloudWatchFullAccess
  lambdaPolicySNS:
    Type: String
    Default: arn:aws:iam::aws:policy/AmazonSNSFullAccess
  lambdaPolicylambda:
    Type: String
    Default: arn:aws:iam::aws:policy/AWSLambda_FullAccess
  lambdabucket:
    Type: String
    Default: testbuck-csye-kaiwenchen
  lambdaPO:
    Type: String
    Default: arn:aws:lambda:us-west-2:928544880062:function:lmb-002146255-kaiwen-csye6225
  certificatearnid:
    Type: String
    Default: arn:aws:acm:us-west-2:928544880062:certificate/d45a65d5-a8bc-4121-a34f-ad469b12b4cc
  princArn:
    Type: String
    Default: arn:aws:iam::928544880062:root
  keyinstance:
    Type: String
    Default: arn:aws:iam::928544880062:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
  keyrdb:
    Type: String
    Default: arn:aws:iam::928544880062:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS    
  cpupercenup:
    Type: Number
    Default: 1.2
  cpupercendwon:
    Type: Number
    Default: 1.0  
  lmabdafuncname:
    Type: String
    Default: lmb-002146255-kaiwen-csye6225


    


     



Resources:

  MyBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365
      BucketName:
        Fn::Join: 
          - "-"
          - - csye6225
            - Fn::Select:
              - 2
              - Fn::Split:
                - /
                - Ref: AWS::StackId
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
          
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1Cidr
      AvailabilityZone: !Ref Subnet1ZN
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2Cidr
      AvailabilityZone: !Ref Subnet2ZN
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3Cidr
      AvailabilityZone: !Ref Subnet3ZN
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName            
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production
      - Key: Name
        Value: !Ref AWS::StackName   
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway    
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: stack
        Value: production
      - Key: Name
        Value: !Ref AWS::StackName        
  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet1
      RouteTableId:
        Ref: myRouteTable
  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet2
      RouteTableId:
        Ref: myRouteTable
  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet3
      RouteTableId:
        Ref: myRouteTable                  
  myRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet4Cidr
      AvailabilityZone: !Ref Subnet1ZN
      Tags:
      - Key: Name
        Value: "private subnet1"
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet5Cidr
      AvailabilityZone: !Ref Subnet2ZN
      Tags:
      - Key: Name
        Value: "private subnet2"
  privateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet6Cidr
      AvailabilityZone: !Ref Subnet3ZN
      Tags:
      - Key: Name
        Value: "private subnet3"   
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: "private route table"

  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet1
      RouteTableId:
        Ref: myPrivateRouteTable
  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet2
      RouteTableId:
        Ref: myPrivateRouteTable
  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet3
      RouteTableId:
        Ref: myPrivateRouteTable      

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: load balancer
      VpcId: 
        Ref: myVPC
      Tags:
        - Key: Name
          Value: "load balancer"  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0             
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: 
        Ref: myVPC
      Tags:
      - Key: Name
        Value: "application"  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup  
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref loadBalancerSecurityGroup

  privateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: rds
      VpcId: 
        Ref: myVPC
      Tags:
        - Key: Name
          Value: "database"  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref MySecurityGroup   

  
  
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
  myDBSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref privateSubnet1
        - !Ref privateSubnet2
        - !Ref privateSubnet3        
    Type: "AWS::RDS::DBSubnetGroup"   

  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBParameterGroupName: !Ref RDSDBParameterGroup
      AllocatedStorage: "20"
      DBInstanceClass: db.t3.micro
      MultiAZ : "false"
      DBInstanceIdentifier: !Ref Username
      MasterUsername: !Ref Username
      MasterUserPassword: !Ref Userpass
      Engine: 'mysql'
      DBSubnetGroupName:
        Ref: myDBSubnetGroup
      PubliclyAccessible: 'false' 
      DBName: !Ref Username 
      StorageEncrypted: 'true'
      KmsKeyId: !Ref myKMSKeyRDS
      VPCSecurityGroups:
        - !Ref privateInstanceSecurityGroup    


  myRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName: "EC2-CSYE6225"
      ManagedPolicyArns:
        - !Ref awsCloudWatchServerAgent
        - !Ref dynamodbpolicy
        - !Ref lambdaPolicySNS
      Tags:
        - Key: Name
          Value: "EC2-CSYE6225"
  mylambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName: "lambda_role"
      ManagedPolicyArns:
        - !Ref lambdaPolicycloudwatch
        - !Ref lambdaPolicylambda
        - !Ref lambdaPolicySNS
      Tags:
        - Key: Name
          Value: "Lambda_Role"    

  mylambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "iam:ListRoles"
              - "lambda:UpdateFunctionCode"
              - "lambda:CreateFunction"
              - "lambda:UpdateFunctionConfiguration"
            Resource:
              - !Ref lambdaPO
      PolicyName: lambdapolicyname
      Roles:
        - !Ref mylambdaRole
        
                        
  myPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !Sub "arn:aws:s3:::${MyBucket} "
              - !Sub "arn:aws:s3:::${MyBucket}/*"
      PolicyName: WebAppS3
      Roles:
        - !Ref myRole


  myInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref myRole

 
        
      
  DnsRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Creating records 
      HostedZoneId: !Ref setrecordDomainID
      RecordSets:
      - AliasTarget:
          DNSName: !GetAtt loadBalancer.DNSName
          HostedZoneId: !GetAtt loadBalancer.CanonicalHostedZoneID
        Name: !Ref setrecordDomainName
        Type: A
         
        
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref dynamodbtable
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: EMAIL_KEY
          AttributeType: S
        - AttributeName: TOKEN
          AttributeType: S
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: TTLATT
      KeySchema:
        - AttributeName: EMAIL_KEY
          KeyType: HASH
        - AttributeName: TOKEN
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


  lambdago:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref lmabdafuncname
      Runtime: go1.x
      Role: !GetAtt mylambdaRole.Arn
      Handler: main
      Code:
        S3Bucket: !Ref lambdabucket
        S3Key: main.zip
      Description: Invoke a function 
      TracingConfig:
        Mode: Active        

  MySNSTopic: 
    Type: AWS::SNS::Topic
    Properties: 
      Subscription:  
      - 
        Endpoint: !GetAtt lambdago.Arn
        Protocol: lambda

  LambdaInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:  !Ref MySNSTopic 
      FunctionName: !GetAtt lambdago.Arn



  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: asg_launch_config
      LaunchTemplateData:  
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 20
              VolumeType: "gp3"
              DeleteOnTermination: true
              KmsKeyId: !Ref myKMSKey
              Encrypted: 'true'
        ImageId: !Ref ImageIdd
        InstanceType: t3.micro
        KeyName: !Ref Keynamestr
        IamInstanceProfile: 
          Arn: !GetAtt myInstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0 
            AssociatePublicIpAddress: 'true'
            Groups:
             - !GetAtt MySecurityGroup.GroupId
            SubnetId:
              Ref: mySubnet1
        UserData: 
          Fn::Base64:
            !Sub |
              #!/bin/bash
              cd /home/ubuntu
              echo ur=${Username} >> .env
              echo ps=${Userpass} >> .env
              echo hs=${RDSDBInstance.Endpoint.Address} >> .env
              echo dbn=${Username} >> .env
              echo bkn=${MyBucket} >> .env
              echo AWS_REGION=${DBRegion} >> .env
              echo endpoint=${setDomainName} >> .env
              echo sendgrid=${sendgridkey} >> .env
              echo dynamotablename=${dynamodbtable} >> .env
              echo snstopic=${MySNSTopic} >> .env
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/opt/cloudwatch-config.json \
              -s
        
        

  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg_launch_config
      AvailabilityZones:
        - !Ref Subnet1ZN
        - !Ref Subnet2ZN
        - !Ref Subnet3ZN
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: 'false'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: asg_launch_config
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup    
      VPCZoneIdentifier:
        - Ref: mySubnet1
        - Ref: mySubnet2
        - Ref: mySubnet3

  asgCPUPolicyup:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref asgWebApp
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1

  asgCPUPolicydown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref asgWebApp
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1      

     

  cpualarmup:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: alarm up
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 10
      EvaluationPeriods: 1
      AlarmActions:
        - !Ref asgCPUPolicyup
      Threshold: !Ref cpupercenup
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp 
      ComparisonOperator: GreaterThanThreshold 

  cpualarmdown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: alarm low
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 10
      EvaluationPeriods: 1
      AlarmActions:
        - !Ref asgCPUPolicydown
      Threshold: !Ref cpupercendwon
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold       



  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - Ref: mySubnet1
        - Ref: mySubnet2
        - Ref: mySubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 3000
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: myVPC 

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificatearnid


  myKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: An example symmetric encryption KMS key
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Ref princArn
            Action: 'kms:*'
            Resource: '*'
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Ref keyinstance
            Action:
              - "kms:*"
            Resource: "*"

  myKMSKeyRDS:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: An example symmetric encryption KMS key
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-2
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Ref princArn
            Action: 'kms:*'
            Resource: '*'
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Ref keyrdb
            Action:
              - "kms:*"
            Resource: "*"  
                      
          
          
           
       

Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref myVPC
    SubnetId1:
      Description: The Subnet1 ID
      Value: !Ref mySubnet1
    SubnetId2:
      Description: The Subnet2 ID
      Value: !Ref mySubnet2
    SubnetId3:
      Description: The Subnet3 ID
      Value: !Ref mySubnet3
    Subnet1Zone:
      Description: The Subnet1 zone
      Value: !Ref Subnet1ZN
    Subnet2Zone:
      Description: The Subnet2 zone
      Value: !Ref Subnet2ZN     
    Subnet3Zone:
      Description: The Subnet3 zone
      Value: !Ref Subnet3ZN
    Subnet1Cidr:
      Description: The Subnet1 Cidr
      Value: !Ref Subnet1Cidr
    Subnet2Cidr:
      Description: The Subnet2 Cidr
      Value: !Ref Subnet2Cidr
    Subnet3Cidr:
      Description: The Subnet3 Cidr
      Value: !Ref Subnet3Cidr                          
