AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  Subnet1Cidr:
    Description: "subnet1 cidr"
    Type: String
    Default: "10.0.32.0/20"
  Subnet1ZN:
    Description: "subnet1 zone"
    Type: String
    Default: "us-west-2a"  
  Subnet2Cidr:
    Description: "subnet2 cidr"
    Type: String
    Default: "10.0.0.0/20"
  Subnet2ZN:
    Description: "subnet2 zone"
    Type: String
    Default: "us-west-2b"   
  Subnet3Cidr:
    Description: "subnet3 cidr"
    Type: String
    Default: "10.0.16.0/20"
  Subnet3ZN:
    Description: "subnet3 zone"
    Type: String
    Default: "us-west-2c"

  Subnet4Cidr:
    Description: "subnet4 cidr"
    Type: String
    Default: "10.0.160.0/20"
  Subnet5Cidr:
    Description: "subnet5 cidr"
    Type: String
    Default: "10.0.128.0/20"
  Subnet6Cidr:
    Description: "subnet6 cidr"
    Type: String
    Default: "10.0.144.0/20"        
  ImageIdd:
    Description: "img id"
    Type: String 
    Default: "ami-0f425899fb7879df0"  
  Keynamestr:
    Description: "using key"      
    Type: String
    Default: "aws-us-west-2"
  Username:
    Description: username
    Type: String
    Default: csye6225
  Userpass:
    Description: userpass
    Type: String
    Default: chenYTCfor6225
  DBRegion:
    Description: DBRegion
    Type: String
    Default: us-west-2
  awsCloudWatchServerAgent:
    Type: String
    Default: arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  setrecordDomainID:
    Type: String
    Default: Z007227514AEIDXKO3F49
  setrecordDomainName:
    Type: String
    Default: prod.louisdomain6225.me

Resources:

  MyBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365
      BucketName:
        Fn::Join: 
          - "-"
          - - csye6225
            - Fn::Select:
              - 2
              - Fn::Split:
                - /
                - Ref: AWS::StackId
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
          
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1Cidr
      AvailabilityZone: !Ref Subnet1ZN
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2Cidr
      AvailabilityZone: !Ref Subnet2ZN
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3Cidr
      AvailabilityZone: !Ref Subnet3ZN
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName            
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production
      - Key: Name
        Value: !Ref AWS::StackName   
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway    
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: stack
        Value: production
      - Key: Name
        Value: !Ref AWS::StackName        
  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet1
      RouteTableId:
        Ref: myRouteTable
  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet2
      RouteTableId:
        Ref: myRouteTable
  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet3
      RouteTableId:
        Ref: myRouteTable                  
  myRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet4Cidr
      AvailabilityZone: !Ref Subnet1ZN
      Tags:
      - Key: Name
        Value: "private subnet1"
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet5Cidr
      AvailabilityZone: !Ref Subnet2ZN
      Tags:
      - Key: Name
        Value: "private subnet2"
  privateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet6Cidr
      AvailabilityZone: !Ref Subnet3ZN
      Tags:
      - Key: Name
        Value: "private subnet3"   
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: "private route table"

  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet1
      RouteTableId:
        Ref: myPrivateRouteTable
  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet2
      RouteTableId:
        Ref: myPrivateRouteTable
  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet3
      RouteTableId:
        Ref: myPrivateRouteTable                                                
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: 
        Ref: myVPC
      Tags:
      - Key: Name
        Value: "application"  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0   
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  privateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: 
        Ref: myVPC
      Tags:
        - Key: Name
          Value: "database"  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref MySecurityGroup    

  
  
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
  myDBSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref privateSubnet1
        - !Ref privateSubnet2
        - !Ref privateSubnet3        
    Type: "AWS::RDS::DBSubnetGroup"   

  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBParameterGroupName: !Ref RDSDBParameterGroup
      AllocatedStorage: "20"
      DBInstanceClass: db.t3.micro
      MultiAZ : "false"
      DBInstanceIdentifier: !Ref Username
      MasterUsername: !Ref Username
      MasterUserPassword: !Ref Userpass
      Engine: 'mysql'
      DBSubnetGroupName:
        Ref: myDBSubnetGroup
      PubliclyAccessible: 'false' 
      DBName: !Ref Username 
      VPCSecurityGroups:
        - !Ref privateInstanceSecurityGroup    


  myRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName: "EC2-CSYE6225"
      ManagedPolicyArns:
        - !Ref awsCloudWatchServerAgent
      Tags:
        - Key: Name
          Value: "EC2-CSYE6225"
  myPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !Sub "arn:aws:s3:::${MyBucket} "
              - !Sub "arn:aws:s3:::${MyBucket}/*"
      PolicyName: WebAppS3
      Roles:
        - !Ref myRole
  myInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref myRole

  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName    
      ImageId: !Ref ImageIdd
      KeyName: !Ref Keynamestr
      InstanceType: "t2.micro"
      DisableApiTermination: 'false'
      IamInstanceProfile: !Ref myInstanceProfile
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            cd /home/ubuntu
            echo ur=${Username} >> .env
            echo ps=${Userpass} >> .env
            echo hs=${RDSDBInstance.Endpoint.Address} >> .env
            echo dbn=${Username} >> .env
            echo bkn=${MyBucket} >> .env
            echo AWS_REGION=${DBRegion} >> .env
            echo endpoint=${setrecordDomainName} >> .env
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/opt/cloudwatch-config.json \
            -s

          
      SubnetId : 
        Ref: mySubnet1
      SecurityGroupIds: 
        - !Ref MySecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
            DeleteOnTermination: 'true'    
  myPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myPrivateRouteTable
      DestinationCidrBlock: 10.0.160.0/20
      InstanceId: !Ref MyEC2Instance            
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: DNS name for my instance.
      HostedZoneId: !Ref setrecordDomainID
      Name: !Ref setrecordDomainName
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt MyEC2Instance.PublicIp         

  
  
    
  
      
                     
       

Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref myVPC
    SubnetId1:
      Description: The Subnet1 ID
      Value: !Ref mySubnet1
    SubnetId2:
      Description: The Subnet2 ID
      Value: !Ref mySubnet2
    SubnetId3:
      Description: The Subnet3 ID
      Value: !Ref mySubnet3
    Subnet1Zone:
      Description: The Subnet1 zone
      Value: !Ref Subnet1ZN
    Subnet2Zone:
      Description: The Subnet2 zone
      Value: !Ref Subnet2ZN     
    Subnet3Zone:
      Description: The Subnet3 zone
      Value: !Ref Subnet3ZN
    Subnet1Cidr:
      Description: The Subnet1 Cidr
      Value: !Ref Subnet1Cidr
    Subnet2Cidr:
      Description: The Subnet2 Cidr
      Value: !Ref Subnet2Cidr
    Subnet3Cidr:
      Description: The Subnet3 Cidr
      Value: !Ref Subnet3Cidr                          
